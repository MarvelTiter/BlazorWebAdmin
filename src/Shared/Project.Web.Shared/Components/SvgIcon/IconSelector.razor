@namespace Project.Web.Shared.Components
@using Microsoft.Extensions.Localization
@using Project.Constraints.Page
@inherits BasicComponent
@UI.BuildPopover(options)
@code {
    List<string> icons = [];
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public EventCallback OnChanged { get; set; }
    [Inject, NotNull] IStringLocalizer<IconSelector>? Localizer { get; set; }
    [NotNull] Project.Constraints.UI.Flyout.PopoverOptions? options = null;
    RenderFragment content =>
    @<div>
        <div class="icons-wrapper">
            @foreach (var item in icons)
        {
            <span @onclick="e => HandleClickEvent(item)" class="@(Value==item? "selected":"")">
                <SvgIcon IconName="@item"></SvgIcon>
            </span>
        }
        </div>
    </div>
    ;
    // <a @onclick="Close">@Localizer["CustomButtons.Close"]</a>

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        icons = SvgIconDataCache.GetIcons();
        options = new Constraints.UI.Flyout.PopoverOptions
            {
                Title = Localizer["IconSelector.Title"],
                Content = content,
                Trigger = UI.BuildButton(this).Text(Localizer["IconSelector.ButtonText"]).Primary().Render(),
            };
    }

    private void Close()
    {
        options?.CloseAsync?.Invoke();
    }
    async Task HandleClickEvent(string iconName)
    {
        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(iconName);
        }
        if (OnChanged.HasDelegate)
        {
            await OnChanged.InvokeAsync();
        }
        Close();
        //StateHasChanged();
    }
}
