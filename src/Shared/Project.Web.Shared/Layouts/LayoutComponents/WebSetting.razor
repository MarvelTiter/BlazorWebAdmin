@using System.Diagnostics.CodeAnalysis;
@using Project.Constraints.Store.Models
@using Project.Web.Shared.ComponentHelper
@using Project.Web.Shared.Utils
@inherits BasicComponent
<MCard Title="页面布局">
    <div style="display:flex;">
        <div class="layout-type" @onclick=@(e=> Mode = LayoutMode.Classic)>
            <div style="width: 15px;height: 100%;background: #ccc;">
            </div>
            <div style="display:flex;flex-direction:column;flex: 1;">
                <div style="width: 100%;height: 5px;background: #c0c0c0;"></div>
                <div></div>
            </div>
        </div>
        <div class="layout-type" @onclick=@(e=> Mode = LayoutMode.Card)>
            <div style="width: 15px;height: 94%;background: #ccc;margin: 2px 0px 2px 2px;">
            </div>
            <div style="display:flex;flex-direction:column;flex: 1;">
                <div style="width: 97%;height: 5px;background: #c0c0c0;margin-top: 2px;margin-left: 2px;"></div>
                <div></div>
            </div>
        </div>
        <div class="layout-type" @onclick=@(e=> Mode = LayoutMode.Line)>
            <div style="display:flex;flex-direction:column;flex: 1;">
                <div style="width: 100%;height: 5px;background: #c0c0c0;"></div>
                <div></div>
            </div>
        </div>
    </div>
</MCard>

<MCard Title="主题设置">
    <div>
        @(UI.BuildRadioGroup<ThemeMode, ThemeMode>(this, modes)
                    .LabelExpression(i => FormatLabel(i))
                    .ValueExpression(i => i)
                    .Bind(() => DarkMode)
                    .Render())
    </div>
</MCard>
@code {
    [Inject, NotNull] IProtectedLocalStorage? Storage { get; set; }
    [Inject, NotNull] IJSRuntime? Js { get; set; }
    LayoutMode Mode
    {
        get => App.Mode ?? LayoutMode.Classic;
        set
        {
            App.Mode = value;
            // SettingChanged?.Invoke();
            Context.Update?.Invoke();
            SaveSetting();
        }
    }
    ThemeMode[] modes = [ThemeMode.Light, ThemeMode.Dark, ThemeMode.OS];
    ThemeMode DarkMode
    {
        get => App.Theme;
        set
        {
            App.Theme = value;
            Context.Update?.Invoke();
            ChangeTheme(value);
            SaveSetting();
        }
    }

    async void SaveSetting()
    {
        await Storage.SetAsync(ConstraintString.APP_STORE_KEY, App);
    }

    async void ChangeTheme(ThemeMode theme)
    {
        await Js.InvokeUtilsAsync("setTheme", $"{theme}".ToLower(), Context.UI.DarkStyle());
    }

    static string FormatLabel(ThemeMode theme)
    {
        return theme switch
        {
            ThemeMode.Light => "亮色",
            ThemeMode.Dark => "暗色",
            ThemeMode.OS => "跟随系统",
            _ => ""
        };
    }
}
