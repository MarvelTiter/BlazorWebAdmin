@using AntDesign.TableModels
@using Project.Constraints.Models.Request
@typeparam TData
@typeparam TQuery where TQuery : IRequest, new()
<Card>
    <Table DataSource="Datas"
           Loading="@Options.Loading"
           Bordered="@true"
           Resizable="@true"
           DefaultExpandAllRows="@true"
           Size="@TableSize.Small"
           TreeChildren="@Options.TreeChildren"
           TItem="TData"
           ScrollX="@Options.ScrollX"
           Total="@Total"
           @bind-PageIndex="@Options.Query.PageIndex"
           @bind-PageSize="@Options.Query.PageSize"
           @bind-SelectedRows="@Options.Selected"
           RowKey="@Options.RowKey"
           OnRowClick="OnRowClick"
           OnRow="RowOptions"
           HidePagination="!Options.Pager">
        <ChildContent>

            @if (Options.EnableSelection)
            {
                <Selection Fixed="left" />
            }

            @* <AntTableColumns Options="Options" RowData="context" Localizer="Localizer"></AntTableColumns> *@

            @foreach (var col in Options.Columns)
            {
                @if (!(col.VisibleExpression?.Invoke(context) ?? col.Visible)) continue;
                @RenderColumn(col)
            }

            @if (Options.Buttons?.Count > 0)
            {
                @foreach (var btnGroup in Options.Buttons.GroupBy(btn => btn.Group))
                {
                    <ActionColumn Title=@(TableLocalizer[btnGroup.Key]) Align="@ColumnAlign.Center" Fixed="right" Width="@Options.ActionColumnWidth">
                        @{
                            var btns = btnGroup.Where(b => b.CheckVisible(context)).ToList();
                            if (Options.ActionButtonColumn.HasValue)
                            {
                                <Project.Web.Shared.ComponentHelper.MGrid GridColumns="@Options.ActionButtonColumn.Value" Gap="5px">
                                    @foreach (var btn in btns)
                                    {
                                        @CreateButton(btn, context)
                                    }
                                </Project.Web.Shared.ComponentHelper.MGrid>
                            }
                            else if (btns.Count <= 2)
                            {
                                foreach (var btn in btns)
                                {
                                    @CreateButton(btn, context)
                                }
                            }
                            else
                            {
                                var first = btns[0];
                                @CreateButton(first, context)
                                <Dropdown>
                                    <Overlay>
                                        <Menu>
                                            @for (var i = 1; i < btns.Count; i++)
                                            {
                                                var btn = btns[i];
                                                <MenuItem>
                                                    @CreateButton(btn, context)
                                                </MenuItem>
                                            }
                                        </Menu>
                                    </Overlay>
                                    <ChildContent>
                                        <a @onclick:preventDefault>
                                            @TableLocalizer["TableTips.More"] <Icon Type="down" />
                                        </a>
                                    </ChildContent>
                                </Dropdown>
                            }
                        }
                    </ActionColumn>
                }
            }
        </ChildContent>
        <PaginationTemplate Context="pageContext">
            <Pagination Class="@pageContext.PaginationClass"
                        Total="@pageContext.Total"
                        PageSize="@pageContext.PageSize"
                        Current="@pageContext.PageIndex"
                        ShowTotal="TotalFragment"
                        ShowSizeChanger="@true"
                        ShowQuickJumper="@true"
                        OnChange="@PaginationChanged" />
        </PaginationTemplate>
    </Table>
</Card>

@code {
    [Parameter, NotNull] public TableOptions<TData, TQuery>? Options { get; set; }
    [Inject, NotNull] IStringLocalizer<TData>? Localizer { get; set; }
    [Inject, NotNull] IStringLocalizer<TableOptions>? TableLocalizer { get; set; }
    [Inject, NotNull] ConfirmService? ConfirmSrv { get; set; }
    [Inject, NotNull] MessageService? MessageSrv { get; set; }
    IEnumerable<TData> Datas => Options.Result?.Payload ?? Enumerable.Empty<TData>();
    int Total => Options.Result?.TotalRecord ?? 0;

    /// <summary>
    /// table总数
    /// </summary>
    Func<PaginationTotalContext, string> TotalFragment => (context) => $"{TableLocalizer["TableTips.Total"]}：{context.Total}";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Options.NotifyChanged = () => InvokeAsync(StateHasChanged);
    }

    // string GetLocalizerString()
    // {

    // }

    async Task PaginationChanged(PaginationEventArgs e)
    {
        Options.Query.PageIndex = e.Page;
        Options.Query.PageSize = e.PageSize;
        await Options.RefreshAsync();
    }

    /// <summary>
    /// 创建按钮
    /// </summary>
    /// <param name="definition"></param>
    /// <param name="context"></param>
    /// <returns></returns>
    private RenderFragment CreateButton(TableButton<TData> definition, TData context)
    {
        return
    @<Button Type="@definition.ButtonType"
                 Size="@ButtonSize.Small"
                 Danger="@definition.Danger"
                 Icon="@definition.Icon"
                 OnClickStopPropagation
                 OnClick="@(() => InvokeButtonAction(definition, context))">
        @(definition.GetLabel(context) ?? TableLocalizer[definition.Label])
    </Button>
    ;
    }

    private async Task InvokeButtonAction(TableButton<TData> definition, TData data)
    {
        if (definition.Danger)
        {
            var confirmResult = await ConfirmSrv.Show(
        TableLocalizer[definition.ConfirmContent ?? "TableTips.DangerActionConfirmContent"].Value
        , TableLocalizer[definition.ConfirmTitle ?? "TableTips.DangerActionConfirmTitle"].Value);
            if (confirmResult == ConfirmResult.OK)
            {
                await CallButtonAction();
            }
        }
        else
        {
            await CallButtonAction();
        }

        return;

        async Task CallButtonAction()
        {
            var result = await definition.Callback.Invoke(data);
            Options.OnTableButtonClickAsync?.Invoke(definition, result);
            if (result)
            {
                var msg = TableLocalizer["TableTips.ActionSuccess"].Value;
                _ = MessageSrv.Success(msg);
                if (Options.AutoRefreshData)
                    await Options.RefreshAsync();
            }
        }
    }

    Task OnRowClick(RowData<TData> row)
    {
        return Options.OnRowClickAsync is not null ? Options.OnRowClickAsync(row.Data) : Task.CompletedTask;
    }

    Dictionary<string, object>? RowOptions(RowData<TData> row)
    {
        return Options.AddRowOptions?.Invoke(row.Data);
    }

    RenderFragment RenderColumn(ColumnInfo col)
    {
        if (col.IsEnum)
        {
            return RenderColumn<Enum>(col);
        }

        var type = (Nullable.GetUnderlyingType(col.DataType) ?? col.DataType).Name.ToLower();
        return type switch
        {
            "string" => RenderColumn<string>(col),
            "int64" => RenderColumn<Int64?>(col),
            "int32" => RenderColumn<Int32?>(col),
            "int16" => RenderColumn<Int16?>(col),
            "single" => RenderColumn<Single?>(col),
            "double" => RenderColumn<Double?>(col),
            "bool" => RenderColumn<Boolean?>(col),
            "datetime" => RenderColumn<DateTime?>(col),
            _ => RenderColumn<string>(col)
        };
    }

    RenderFragment RenderColumn<TColumnData>(ColumnInfo col)
    {
        return
    @<Column TData="TColumnData" Ellipsis="@col.Ellipsis" Width="@col.Width" Sortable="@col.Sortable" Title="@(Localizer[col.Label])" Fixed="@col.Fixed" DataIndex="@col.PropertyOrFieldName" Grouping="@col.Grouping" GroupBy="data => col.GroupByExpression(data)" OnCell="GetOnCell(col)" CellRender="ColumnRender<TColumnData>(col)">
    </Column>
    ;
    }
}