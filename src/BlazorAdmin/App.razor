@using BlazorAdmin.Client
@using System.Diagnostics.CodeAnalysis
@using Microsoft.Extensions.Options
@using Project.Constraints.Options
@using Project.Constraints.Store.Models
@using Project.Web.Shared.Components
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="_content/AntDesign/css/ant-design-blazor.css" rel="stylesheet">
    <script src="_content/AntDesign/js/ant-design-blazor.js"></script>
    @* <script src="_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.lib.module.js" type="module" async></script> *@

    <VLink Href="_content/Project.Web.Shared/css/app.css" />
    <VLink Href="app.css" />
    <VLink Href="BlazorAdmin.styles.css" />
    <HeadOutlet @rendermode="@RenderMode" />
</head>

<body>
    @if (TokenOption.Value.NeedAuthentication)
    {
        <Routes @rendermode="@RenderMode" />
    }
    else
    {
        <FreeRoutes @rendermode="@RenderMode" />
    }
    <Project.Web.Shared.Components.ReconnectorOutlet @rendermode="@RenderMode"></Project.Web.Shared.Components.ReconnectorOutlet>

    <script src="_framework/blazor.web.js"></script>
    <VScript Src="./js//blazor-admin-project.js"></VScript>
</body>

</html>

@code {
    [CascadingParameter, NotNull] public HttpContext? HttpContext { get; set; }
    [Inject, NotNull] public IOptions<AppSetting>? AppOption { get; set; }
    [Inject, NotNull] public IOptions<Token>? TokenOption { get; set; }
    IComponentRenderMode? RenderMode
    {
        get
        {
            if (HttpContext.Request.Path.StartsWithSegments("/account/login"))
            {
                return null;
            }

            return AppOption.Value.RunMode switch
            {
                AppRunMode.Auto => new InteractiveAutoRenderMode(false),
                AppRunMode.Server => new InteractiveServerRenderMode(false),
                AppRunMode.WebAssembly => new InteractiveWebAssemblyRenderMode(false),
                _ => throw new ArgumentException()
            };
        }
    }
}