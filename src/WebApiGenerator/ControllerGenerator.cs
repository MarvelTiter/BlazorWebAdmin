using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using WebApiGenerator.Models;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;
namespace WebApiGenerator
{
    [Generator]
    public class ControllerGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            //context.RegisterPostInitializationOutput(ctx => ctx.AddSource("WebControllerAttribute.g.cs",
            //    SourceText.From(WebApiGeneratorHepers.WebControllerAttribute, Encoding.UTF8)
            //    ));

            //context.RegisterPostInitializationOutput(ctx => ctx.AddSource("WebMethodAttribute.g.cs",
            //    SourceText.From(WebApiGeneratorHepers.WebMethodAttribute, Encoding.UTF8)
            //    ));

            //context.RegisterPostInitializationOutput(ctx => ctx.AddSource("WebApiGenerator.Enums.g.cs",
            //    SourceText.From(WebApiGeneratorHepers.Enums, Encoding.UTF8)
            //    ));


            var list = context.SyntaxProvider.ForAttributeWithMetadataName(WebApiGeneratorHepers.WebControllerAttributeFullName,
                static (node, token) => true,
                static (c, t) => c);

            context.RegisterSourceOutput(list, static (context, source) =>
            {

                Debugger.Launch();

                var methods = source.TargetNode.ChildNodes().Where(c => c is MethodDeclarationSyntax).Cast<MethodDeclarationSyntax>();
                List<MemberDeclarationSyntax> members = new List<MemberDeclarationSyntax>();

                var constructor = ConstructorDeclaration($"{source.TargetSymbol.MetadataName}Controller").AddParameterListParameters(
                     Parameter(Identifier("proxyService")).WithType(IdentifierName(source.TargetSymbol.MetadataName)))
                .WithBody(Block(ExpressionStatement(BinaryExpression(SyntaxKind.AddAssignmentExpression,))));

                foreach (var method in methods)
                {

                    var methodSyntax = MethodDeclaration(
                            method.ReturnType,
                            method.Identifier
                        ).AddParameterListParameters(method.ParameterList.Parameters.ToArray())
                        .AddModifiers(Token(SyntaxKind.PublicKeyword))
                        .WithExpressionBody(ArrowExpressionClause(InvocationExpression(
                            MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, IdentifierName("proxyService"), IdentifierName(method.Identifier.Text))
                            ).AddArgumentListArguments(method.ParameterList.Parameters.Select(p => Argument(IdentifierName(p.Identifier.Text))).ToArray())));

                    members.Add(methodSyntax);
                }

                var unit = CompilationUnit()
                  .AddMembers(NamespaceDeclaration(IdentifierName(source.TargetSymbol.ContainingNamespace.ToDisplayString()))
                    .WithLeadingTrivia(Comment("// <auto-generated/>"), Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)))
                    .AddMembers(ClassDeclaration($"{source.TargetSymbol.MetadataName}Controller")
                        .AddModifiers(Token(TriviaList(Comment("/// <inheritdoc/>")), SyntaxKind.PublicKeyword, TriviaList()))
                        .AddMembers([.. members]))
                    )
                  .NormalizeWhitespace();
                var text = unit.GetText(Encoding.UTF8).ToString();
            });
        }
    }
}
